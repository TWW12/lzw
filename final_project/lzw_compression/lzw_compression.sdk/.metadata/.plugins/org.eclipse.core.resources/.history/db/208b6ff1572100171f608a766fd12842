/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "xbasic_types.h"
#include "axi_compression.h"
#include "xil_io.h"
#include "C:\Users\Shaun\Desktop\lzw_compression\lzw_compression.sdk\decompression\decompression.h"
#include "C:\Users\Shaun\Desktop\lzw_compression\lzw_compression.sdk\decompression\dict.h"
#include "C:\Users\Shaun\Desktop\lzw_compression\lzw_compression.sdk\decompression\compression_inputs.h"


Xuint32 *input_fifo_wr_en = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR);
Xuint32 *input_fifo_din = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+4);
Xuint32 *input_fifo_full = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+8);
Xuint32 *file_size = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+12);
Xuint32 *output_fifo_rd_en = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+16);
Xuint32 *output_fifo_dout = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+20);
Xuint32 *output_fifo_full = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+24);
Xuint32 *output_fifo_empty = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+28);
Xuint32 *compression_done = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+32);
Xuint32 *input_fifo_wr_ack = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+36);
Xuint32 *output_fifo_valid = (Xuint32)(XPAR_AXI_COMPRESSION_0_S00_AXI_BASEADDR+40);


int compressed_output[4096];
int input_size;
char input[4096];



int main()
{
	init_platform();

	int input_choice;
	int i;
	int compression_size;
	int input_bits;
	int compressed_bits=0;
	double percentage_smaller;

	input_choice = 1;

	if(input_choice == 1)
	{
		strcpy(input, compression_input1);
		input_size = strlen(input);
		*file_size = input_size+1;
		xil_printf("input_size = %d\n", input_size);
		input_bits = input_size*8;
	}
	else if(input_choice == 2)
	{
		strcpy(input, compression_input2);
		input_size = strlen(input);
		*file_size = input_size;
		input_bits = input_size*8;
	}
	else if(input_choice == 3)
	{
		strcpy(input, compression_input3);
		input_size = strlen(input);
		*file_size = input_size;
		input_bits = input_size*8;
	}
	else if(input_choice == 4)
	{
		strcpy(input, compression_input4);
		input_size = strlen(input);
		*file_size = input_size;
		input_bits = input_size*8;
	}

    char decompressed_output[input_size+1];
    memset(decompressed_output, 0, (input_size+1)*sizeof(char));

    xil_printf("\n  /*************************************************\\ \n\n");
    xil_printf("----------------------\n");
    xil_printf("Compression input:\n");
    xil_printf("----------------------\n");

    int break_check = 0;
    for(i=0; i<input_size+1; i++)
    {
    	xil_printf("%c", input[i]);
    	if( (break_check !=0 && break_check>40 && input[i] == ' ') || i==input_size-1)
    	{
    		xil_printf("\n");
    		break_check = 0;
    	}
    	break_check++;
    }
    break_check = 0;

    xil_printf("\nNumber of bits in input = %d\n", input_bits);



    for(i=0; i<input_size; i++)
    {
    	*input_fifo_din = input[i];
    	*input_fifo_wr_en = 0x00000001;
    }

    xil_printf("\nWaiting until compression is complete\n");

    int done = (*compression_done)&(0x00000001);
    while(done == 0)
    {
    	done = (*compression_done)&(0x00000001);
    }

    xil_printf("Compression complete\n");


    compression_size = 0;
    while(*output_fifo_empty == 0)
    {
    	compressed_output[compression_size] = (*output_fifo_dout)&(0x00000FFF);
    	*output_fifo_rd_en = 0x00000001;
    	if(compressed_output[compression_size] <= 255)
    	{
    		compressed_bits +=12;
    	}
    	else
    	{
    		compressed_bits +=12;
    	}
    	compression_size++;

    }

    xil_printf("compression size = %d\n", compression_size);
    xil_printf("\n------------------------\n");
    xil_printf("Compression output:\n");
    xil_printf("------------------------\n");
    for(i=0; i<compression_size; i++)
    {
    	xil_printf("%d  ",compressed_output[i]);
    	if((i%6 == 0 && i != 0) || i==compression_size-1)
    	{
    		xil_printf("\n");
    	}
    }
    xil_printf("\nNumber of bits in compressed output = %d\n", compressed_bits);


    xil_printf("\n\nStarting decompression\n");

    lzw_decompress(compressed_output, compression_size, decompressed_output);

    xil_printf("Decompression complete\n");

    xil_printf("\n--------------------------\n");
    xil_printf("Decompressed output:\n");
    xil_printf("--------------------------\n");
    for(i=0; i<input_size; i++)
    {
        xil_printf("%c", decompressed_output[i]);
        if( (break_check !=0 && break_check>40 && decompressed_output[i] == ' ' ) || i==input_size-1)
        {
        	xil_printf("\n");
        	break_check = 0;
        }
        break_check++;
    }
    percentage_smaller = 100 - ((double)compressed_bits/(double)input_bits)*100;
    printf("\nCompressed output is %.2f%% smaller than the original input", percentage_smaller);
    xil_printf("\n\n \\*************************************************/ \n");

    cleanup_platform();
    return 0;
}
